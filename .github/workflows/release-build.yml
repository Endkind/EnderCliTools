name: Release Build (Linux, Windows)

on:
  release:
    types: [published]

permissions:
  contents: write

concurrency:
  group: 'release-${{ github.ref }}'
  cancel-in-progress: false

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_match: ${{ steps.check.outputs.version_match }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compare tag with Cargo.toml version
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RAW_TAG="${{ github.event.release.tag_name }}"
          CLEAN_TAG="${RAW_TAG#v}"
          FILE_VERSION=$(grep '^version' Cargo.toml | head -1 | sed -E 's/version\s*=\s*"(.*)"/\1/')

          if [ "$CLEAN_TAG" = "$FILE_VERSION" ]; then
            echo "version_match=true" >> "$GITHUB_OUTPUT"
          else
            echo "version_match=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Delete release & tag if version mismatches
        if: steps.check.outputs.version_match == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete "${{ github.event.release.tag_name }}" -y || true
          gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/${{ github.event.release.tag_name }}" || true

  build:
    name: Build (${{ matrix.os }})
    needs: check-version
    if: needs.check-version.outputs.version_match == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            exe_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            exe_suffix: ".exe"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build (release)
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare dist folder
        run: mkdir -p dist

      # region Linux Build

      - name: Determine binary name (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          META=$(cargo metadata --no-deps --format-version=1)
          BIN_NAME=$(echo "$META" | jq -r '
            .packages[0] as $p
            | ($p.targets[] | select(.kind[]=="bin") | .name) // $p.name
          ')
          echo "BIN_NAME=$BIN_NAME" >> $GITHUB_ENV

      - name: Strip binary (Linux)
        if: runner.os == 'Linux'
        run: |
          BIN="target/${{ matrix.target }}/release/${BIN_NAME}"
          if command -v strip >/dev/null 2>&1; then strip "$BIN" || true; fi

      - name: Copy binary to dist with release name (Linux)
        if: runner.os == 'Linux'
        run: |
          SRC="target/${{ matrix.target }}/release/${BIN_NAME}"
          DST="dist/${BIN_NAME}-${{ github.ref_name }}-${{ matrix.target }}"
          install -Dm755 "$SRC" "$DST"
          echo "ASSET_PATH=$DST" >> $GITHUB_ENV

      - name: Install cargo-deb (Linux)
        if: runner.os == 'Linux'
        run: cargo install cargo-deb

      - name: Build .deb package (Linux)
        if: runner.os == 'Linux'
        run: |
          cargo deb --no-build --target ${{ matrix.target }} --output dist/
          DEB_PATH=$(ls dist/*.deb | head -n 1)
          echo "INSTALLER_PATH=$DEB_PATH" >> $GITHUB_ENV

      #endregion

      #region Windows Build

      - name: Determine binary name (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $meta = cargo metadata --no-deps --format-version=1 | ConvertFrom-Json
          $pkg  = $meta.packages[0]
          $bin  = ($pkg.targets | Where-Object { $_.kind -contains "bin" } | Select-Object -First 1).name
          if (-not $bin) { $bin = $pkg.name }
          echo "BIN_NAME=$bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $src = "target/${{ matrix.target }}/release/${env:BIN_NAME}${{ matrix.exe_suffix }}"
          $dst = "dist/${env:BIN_NAME}-${{ github.ref_name }}-${{ matrix.target }}${{ matrix.exe_suffix }}"
          New-Item -ItemType Directory -Force -Path "dist" | Out-Null
          Copy-Item $src $dst -Force
          echo "ASSET_PATH=$dst" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install WiX Toolset (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: choco install wixtoolset --no-progress -y

      - name: Install cargo-wix (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cargo install cargo-wix

      - name: Build .msi package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cargo wix --target ${{ matrix.target }} --output dist\
          $msi = Get-ChildItem dist\*.msi | Select-Object -First 1
          echo "INSTALLER_PATH=$msi" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      #endregion

      # Upload Release Assets

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ASSET_PATH }}
            ${{ env.INSTALLER_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #endregion
